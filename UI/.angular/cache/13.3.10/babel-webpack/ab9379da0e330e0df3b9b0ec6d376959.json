{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthorizeGuard = /*#__PURE__*/(() => {\n  class AuthorizeGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    canActivate(route, state) {\n      let destination = [\"login\"].concat(state.url.replace('/', '').split('/').map(x => x.replace('/', '')));\n      let currentSection = destination[1];\n      let requiredRole = \"\";\n\n      switch (currentSection) {\n        case 'errors':\n          requiredRole = \"admin\";\n          break;\n\n        case 'settings':\n          requiredRole = 'settings';\n          break;\n\n        case 'producer':\n          requiredRole = 'producer';\n          break;\n      }\n\n      if (this.authService.profile === undefined) {\n        console.log(\"Not logged in. Navigating to the login page...\");\n        this.router.navigate(destination);\n        return false;\n      } else {\n        let checkRole = this.authService.requireRole(requiredRole);\n\n        if (checkRole) {\n          return true;\n        } else {\n          console.log(\"Access denied. Navigating to the login page...\");\n          this.router.navigate(destination);\n          return false;\n        }\n      }\n    }\n\n  }\n\n  AuthorizeGuard.ɵfac = function AuthorizeGuard_Factory(t) {\n    return new (t || AuthorizeGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthorizeGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthorizeGuard,\n    factory: AuthorizeGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthorizeGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}