{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_services/socket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"chatContainer\"];\n\nfunction ChatComponent_div_3_b_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"b\");\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, message_r2.type));\n  }\n}\n\nfunction ChatComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 8);\n    i0.ɵɵtemplate(2, ChatComponent_div_3_b_2_Template, 4, 3, \"b\", 9);\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 10)(6, \"small\", 11);\n    i0.ɵɵtext(7);\n    i0.ɵɵpipe(8, \"date\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(\"d-flex \" + (message_r2.type == \"server\" ? \"justify-content-center\" : message_r2.socketId == ctx_r1.socketService.socket.id ? \"justify-content-end\" : \"justify-content-start\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"server\", message_r2.type == \"server\")(\"producer\", message_r2.type == \"producer\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", message_r2.type !== \"server\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(message_r2.text);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(8, 9, message_r2.date, \"shortTime\"));\n  }\n}\n\nexport let ChatComponent = /*#__PURE__*/(() => {\n  class ChatComponent {\n    constructor(socketService) {\n      this.socketService = socketService;\n      this.message = \"\";\n      this.socketService.scrollChatSubject.subscribe(() => {\n        this.scrollToBottom(this.chatContainer);\n      });\n    }\n\n    sendMessage() {\n      if (!this.message.trim()) {\n        return;\n      }\n\n      this.message = this.message.trim();\n      this.socketService.socket.emit(\"messaging\", this.type, this.message);\n      this.message = \"\";\n    }\n\n    scrollToBottom(e) {\n      setTimeout(() => {\n        try {\n          e.nativeElement.scrollTop = e.nativeElement.scrollHeight;\n        } catch (_a) {}\n      });\n    }\n\n  }\n\n  ChatComponent.ɵfac = function ChatComponent_Factory(t) {\n    return new (t || ChatComponent)(i0.ɵɵdirectiveInject(i1.SocketService));\n  };\n\n  ChatComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatComponent,\n    selectors: [[\"app-chat\"]],\n    viewQuery: function ChatComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chatContainer = _t.first);\n      }\n    },\n    inputs: {\n      type: \"type\"\n    },\n    decls: 8,\n    vars: 2,\n    consts: [[1, \"card\", \"chat\", \"d-flex\"], [1, \"mesages\", \"bg-light\", \"flex-fill\", \"p-3\", \"overflow-auto\"], [\"chatContainer\", \"\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-group\"], [\"type\", \"text\", \"placeholder\", \"Type a message\", 1, \"form-control\", 3, \"ngModel\", \"keydown.enter\", \"ngModelChange\"], [1, \"btn\", \"btn-outline-dark\", 3, \"click\"], [1, \"fas\", \"fa-paper-plane\"], [1, \"message\", \"p-2\", \"mb-3\", \"rounded\"], [4, \"ngIf\"], [1, \"d-flex\", \"justify-content-end\", \"text-muted\"], [1, \"time\"]],\n    template: function ChatComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2);\n        i0.ɵɵtemplate(3, ChatComponent_div_3_Template, 9, 12, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"input\", 5);\n        i0.ɵɵlistener(\"keydown.enter\", function ChatComponent_Template_input_keydown_enter_5_listener() {\n          return ctx.sendMessage();\n        })(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.message = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function ChatComponent_Template_button_click_6_listener() {\n          return ctx.sendMessage();\n        });\n        i0.ɵɵelement(7, \"i\", 7);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.socketService.messages);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.message);\n      }\n    },\n    directives: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n    pipes: [i2.TitleCasePipe, i2.DatePipe],\n    styles: [\"div.chat[_ngcontent-%COMP%]{height:100%;color:#000;text-align:left}div.chat[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{width:80%;background-color:#fff}div.chat[_ngcontent-%COMP%]   .message.server[_ngcontent-%COMP%]{background-color:#ffffe7;font-size:small}div.chat[_ngcontent-%COMP%]   .message.producer[_ngcontent-%COMP%]{background-color:#d4ecff}\"]\n  });\n  return ChatComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}