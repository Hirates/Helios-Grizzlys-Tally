{"ast":null,"code":"import { EventEmitter, Component, forwardRef, ChangeDetectionStrategy, ViewChild, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as editor from 'jsoneditor';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nconst _c0 = [\"jsonEditorContainer\"];\n\nclass JsonEditorOptions {\n  constructor() {\n    this.enableSort = true;\n    this.enableTransform = true;\n    this.escapeUnicode = false;\n    this.expandAll = false;\n    this.sortObjectKeys = false;\n    this.history = true;\n    this.mode = 'tree';\n    this.search = true;\n    this.indentation = 2;\n  }\n\n}\n\nlet JsonEditorComponent = /*#__PURE__*/(() => {\n  class JsonEditorComponent {\n    constructor() {\n      this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);\n      this.disabled = false;\n      this.isFocused = false;\n      this.optionsChanged = false;\n      this._data = {};\n      this.options = new JsonEditorOptions();\n      this.debug = false;\n      this.change = new EventEmitter();\n      this.jsonChange = new EventEmitter(); // Implemented as part of ControlValueAccessor.\n\n      this.onTouched = () => {}; // Implemented as part of ControlValueAccessor.\n\n\n      this.onChangeModel = e => {};\n    }\n\n    set data(value) {\n      this._data = value;\n\n      if (this.editor) {\n        this.editor.destroy();\n        this.ngOnInit();\n      }\n    }\n\n    ngOnInit() {\n      let optionsBefore = this.options;\n\n      if (!this.optionsChanged && this.editor) {\n        optionsBefore = this.editor.options;\n      }\n\n      if (!this.options.onChangeJSON && this.jsonChange) {\n        this.options.onChangeJSON = this.onChangeJSON.bind(this);\n      }\n\n      if (!this.options.onChange && this.change) {\n        this.options.onChange = this.onChange.bind(this);\n      }\n\n      const optionsCopy = Object.assign({}, optionsBefore); // expandAll is an option only supported by ang-jsoneditor and not by the the original jsoneditor.\n\n      delete optionsCopy.expandAll;\n\n      if (this.debug) {\n        console.log(optionsCopy, this._data);\n      }\n\n      if (!this.jsonEditorContainer.nativeElement) {\n        console.error(`Can't find the ElementRef reference for jsoneditor)`);\n      }\n\n      if (optionsCopy.mode === 'text' || optionsCopy.mode === 'code') {\n        optionsCopy.onChangeJSON = null;\n      }\n\n      this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsCopy, this._data);\n\n      if (this.options.expandAll) {\n        this.editor.expandAll();\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n    /**\n     * ngModel\n     * ControlValueAccessor\n     */\n    // ControlValueAccessor implementation\n\n\n    writeValue(value) {\n      this.data = value;\n    } // Implemented as part of ControlValueAccessor\n\n\n    registerOnChange(fn) {\n      this.onChangeModel = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    onChange(e) {\n      if (this.editor) {\n        try {\n          const json = this.editor.get();\n          this.onChangeModel(json);\n          this.change.emit(json);\n        } catch (e) {\n          if (this.debug) {\n            console.log(e);\n          }\n        }\n      }\n    }\n\n    onChangeJSON(e) {\n      if (this.editor) {\n        try {\n          this.jsonChange.emit(this.editor.get());\n        } catch (e) {\n          if (this.debug) {\n            console.log(e);\n          }\n        }\n      }\n    }\n    /**\n     * JSON EDITOR FUNCTIONS\n     */\n\n\n    collapseAll() {\n      this.editor.collapseAll();\n    }\n\n    expandAll() {\n      this.editor.expandAll();\n    }\n\n    focus() {\n      this.editor.focus();\n    }\n\n    get() {\n      return this.editor.get();\n    }\n\n    getMode() {\n      return this.editor.getMode();\n    }\n\n    getName() {\n      return this.editor.getName();\n    }\n\n    getText() {\n      return this.editor.getText();\n    }\n\n    set(json) {\n      this.editor.set(json);\n    }\n\n    setMode(mode) {\n      this.editor.setMode(mode);\n    }\n\n    setName(name) {\n      this.editor.setName(name);\n    }\n\n    setSelection(start, end) {\n      this.editor.setSelection(start, end);\n    }\n\n    getSelection() {\n      return this.editor.getSelection();\n    }\n\n    getValidateSchema() {\n      return this.editor.validateSchema;\n    }\n\n    setSchema(schema, schemaRefs) {\n      this.editor.setSchema(schema, schemaRefs);\n    }\n\n    search(query) {\n      this.editor.search(query);\n    }\n\n    setOptions(newOptions) {\n      if (this.editor) {\n        this.editor.destroy();\n      }\n\n      this.optionsChanged = true;\n      this.options = newOptions;\n      this.ngOnInit();\n    }\n\n    update(json) {\n      this.editor.update(json);\n    }\n\n    destroy() {\n      this.editor.destroy();\n    }\n\n    getEditor() {\n      return this.editor;\n    }\n\n    isValidJson() {\n      try {\n        JSON.parse(this.getText());\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n\n  }\n\n  JsonEditorComponent.ɵfac = function JsonEditorComponent_Factory(t) {\n    return new (t || JsonEditorComponent)();\n  };\n\n  JsonEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: JsonEditorComponent,\n    selectors: [[\"json-editor\"]],\n    viewQuery: function JsonEditorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.jsonEditorContainer = _t.first);\n      }\n    },\n    inputs: {\n      options: \"options\",\n      debug: \"debug\",\n      data: \"data\"\n    },\n    outputs: {\n      change: \"change\",\n      jsonChange: \"jsonChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => JsonEditorComponent),\n      multi: true\n    }])],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"id\"], [\"jsonEditorContainer\", \"\"]],\n    template: function JsonEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"div\", 0, 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return JsonEditorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgJsonEditorModule = /*#__PURE__*/(() => {\n  class NgJsonEditorModule {\n    static forRoot() {\n      return {\n        ngModule: NgJsonEditorModule,\n        providers: []\n      };\n    }\n\n  }\n\n  NgJsonEditorModule.ɵfac = function NgJsonEditorModule_Factory(t) {\n    return new (t || NgJsonEditorModule)();\n  };\n\n  NgJsonEditorModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgJsonEditorModule\n  });\n  NgJsonEditorModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule]]\n  });\n  return NgJsonEditorModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgJsonEditorModule, {\n    declarations: function () {\n      return [JsonEditorComponent];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [JsonEditorComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { JsonEditorComponent, JsonEditorOptions, NgJsonEditorModule }; //# sourceMappingURL=ang-jsoneditor.js.map","map":null,"metadata":{},"sourceType":"module"}