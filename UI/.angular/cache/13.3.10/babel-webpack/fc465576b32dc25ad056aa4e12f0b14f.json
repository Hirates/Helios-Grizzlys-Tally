{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { io } from 'socket.io-client';\nimport * as i0 from \"@angular/core\";\nexport let SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor() {\n      this.devices = [];\n      this.device_states = [];\n      this.listenerClients = [];\n      this.vmixClients = [];\n      this.sources = [];\n      this.busOptions = [];\n      this.remoteErrorOpt = true;\n      this.initialDataLoaded = false;\n      this.interfaces = [];\n      this.logs = [];\n      this.tallyData = [];\n      this.sourceTypes = [];\n      this.sourceTypeDataFields = [];\n      this.testModeOn = false;\n      this.deviceSources = [];\n      this.addresses = {};\n      this.deviceActions = [];\n      this.outputTypes = [];\n      this.outputTypeDataFields = [];\n      this.tslClients = [];\n      this.cloudDestinations = [];\n      this.cloudKeys = [];\n      this.cloudClients = [];\n      this.portsInUse = [];\n      this.networkDiscovery = [];\n      this.messages = [];\n      this.errorReports = [];\n      this.users = [];\n      this.dataLoaded = new Promise(resolve => this._resolveDataLoadedPromise = resolve);\n      this.newLogsSubject = new Subject();\n      this.scrollTallyDataSubject = new Subject();\n      this.scrollChatSubject = new Subject();\n      this.closeModals = new Subject();\n      this.deviceStateChanged = new Subject();\n      this.socket = io();\n      this.socket.on(\"reconnect\", attempt => {\n        if (typeof this.accessToken !== \"undefined\") {\n          this.socket.emit('access_token', this.accessToken);\n        }\n      });\n      this.socket.on('sources', sources => {\n        this.sources = this.prepareSources(sources);\n      });\n      this.socket.on('devices', devices => {\n        this.devices = devices;\n\n        this._resolveDataLoadedPromise();\n\n        this.deviceStateChanged.next(this.device_states);\n      });\n      this.socket.on('bus_options', busOptions => {\n        this.busOptions = busOptions;\n      });\n      this.socket.on('listener_clients', listenerClients => {\n        for (const device of this.devices) {\n          device.listenerCount = 0;\n        }\n\n        this.listenerClients = listenerClients.map(l => {\n          l.ipAddress = l.ipAddress.replace('::ffff:', '');\n          l.device = this.devices.find(d => d.id == l.deviceId);\n          if (!l.inactive) l.device.listenerCount += 1;\n          return l;\n        }).sort((a, b) => a.inactive === b.inactive ? 0 : a.inactive ? 1 : -1);\n      });\n      this.socket.on('vmix_clients', vmix_clients => {\n        this.vmixClients = vmix_clients.map(l => {\n          l.host = l.host.replace('::ffff:', '');\n          return l;\n        });\n      });\n      this.socket.on('device_states', device_states => {\n        this.device_states = device_states;\n        this.deviceStateChanged.next(this.device_states);\n      });\n      this.socket.on(\"messaging\", (type, socketId, message) => {\n        this.messages.push({\n          type,\n          socketId,\n          text: message,\n          date: new Date()\n        });\n        this.scrollChatSubject.next();\n      });\n      this.socket.on(\"version\", version => {\n        this.version = version;\n      });\n      this.socket.on(\"externalAddress\", externalAddress => {\n        this.externalAddress = externalAddress;\n      });\n      this.socket.on(\"interfaces\", interfaces => {\n        interfaces.forEach(net_interface => {\n          this.interfaces.push({\n            name: net_interface.name,\n            address: net_interface.address,\n            url: `http://${net_interface.address}:4455/#/tally`\n          });\n        });\n      });\n      this.socket.on(\"logs\", logs => {\n        this.logs = logs;\n        this.newLogsSubject.next();\n      });\n      this.socket.on(\"log_item\", log => {\n        if (this.logs.length > 1000) {\n          this.logs.shift();\n        }\n\n        this.logs.push(log);\n        this.newLogsSubject.next();\n      });\n      this.socket.on('tally_data', (sourceId, address, busses) => {\n        var _a;\n\n        if (this.tallyData.length > 1000) {\n          this.tallyData.shift();\n        }\n\n        this.tallyData.push({\n          datetime: Date.now().toString(),\n          log: `Source: ${(_a = this.getSourceById(sourceId)) === null || _a === void 0 ? void 0 : _a.name}  Address: ${address} ${busses.length === 0 ? \"No busses\" : `Bus${busses.length > 1 ? \"ses\" : \"\"}: ${busses.map(b => `${b[0].toUpperCase()}${b.slice(1)}`)}`}`,\n          type: 'info'\n        });\n        this.scrollTallyDataSubject.next();\n      });\n      this.socket.on('device_sources', deviceSources => {\n        this.deviceSources = deviceSources;\n      });\n      this.socket.on('device_actions', deviceActions => {\n        this.deviceActions = deviceActions;\n      });\n      this.socket.on('tsl_clients', clients => {\n        this.tslClients = clients;\n      });\n      this.socket.on('cloud_destinations', destinations => {\n        this.cloudDestinations = destinations;\n      });\n      this.socket.on('cloud_keys', keys => {\n        this.cloudKeys = keys;\n      });\n      this.socket.on('cloud_clients', clients => {\n        this.cloudClients = clients;\n      });\n      this.socket.on('addresses', addresses => {\n        this.addresses = addresses;\n      });\n      this.socket.on('initialdata', (sourceTypes, sourceTypesDataFields, addresses, outputTypes, outputTypesDataFields, busOptions, sourcesData, devicesData, deviceSources, deviceActions, device_states, tslClients, cloudDestinations, cloudKeys, cloudClients) => {\n        this.initialDataLoaded = true;\n        this.sourceTypes = sourceTypes.filter(s => s.enabled);\n        this.sourceTypeDataFields = sourceTypesDataFields;\n        this.addresses = addresses;\n        this.outputTypes = outputTypes;\n        this.outputTypeDataFields = outputTypesDataFields;\n        this.busOptions = busOptions;\n        this.sources = this.prepareSources(sourcesData);\n        this.devices = devicesData;\n        this.deviceSources = deviceSources;\n        this.deviceActions = deviceActions;\n        this.device_states = device_states;\n        this.tslClients = tslClients;\n        this.cloudDestinations = cloudDestinations;\n        this.cloudKeys = cloudKeys;\n        this.cloudClients = cloudClients;\n        this.deviceStateChanged.next(this.device_states);\n      });\n      this.socket.on('listener_clients', listenerClients => {\n        this.listenerClients = listenerClients.map(l => {\n          l.ipAddress = l.ipAddress.replace(\"::ffff:\", \"\");\n          return l;\n        });\n      });\n      this.socket.on('manage_response', response => {\n        switch (response.result) {\n          case 'source-added-successfully':\n          case 'source-edited-successfully':\n          case 'source-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('sources');\n            this.socket.emit('devices');\n            break;\n\n          case 'device-added-successfully':\n          case 'device-edited-successfully':\n          case 'device-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('devices');\n            this.socket.emit('device_sources');\n            this.socket.emit('device_actions');\n            this.socket.emit('device_states');\n            this.socket.emit('listener_clients');\n            break;\n\n          case 'device-source-added-successfully':\n          case 'device-source-edited-successfully':\n            this.socket.emit('device_sources');\n            this.closeModals.next();\n            break;\n\n          case 'device-source-deleted-successfully':\n            this.socket.emit('device_sources');\n            break;\n\n          case 'device-action-added-successfully':\n          case 'device-action-edited-successfully':\n          case 'device-action-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('devices');\n            this.socket.emit('device_actions');\n            break;\n\n          case 'tsl-client-added-successfully':\n          case 'tsl-client-edited-successfully':\n          case 'tsl-client-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('tsl_clients');\n            break;\n\n          case 'bus-option-added-successfully':\n          case 'bus-option-edited-successfully':\n          case 'bus-option-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('bus_options');\n            break;\n\n          case 'cloud-destination-added-successfully':\n          case 'cloud-destination-edited-successfully':\n          case 'cloud-destination-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('cloud_destinations');\n            break;\n\n          case 'cloud-key-added-successfully':\n          case 'cloud-key-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('cloud_keys');\n            break;\n\n          case 'cloud-client-removed-successfully':\n            this.closeModals.next();\n            this.socket.emit('cloud_clients');\n            break;\n\n          case 'cloud-client-not-removed':\n            alert(response.error);\n            this.closeModals.next();\n            break;\n\n          case 'user-added-successfully':\n          case 'user-edited-successfully':\n          case 'user-deleted-successfully':\n            this.closeModals.next();\n            this.socket.emit('users');\n            break;\n\n          case 'error':\n            alert('Unexpected Error Occurred: ' + response.error);\n            break;\n\n          default:\n            alert(response.result);\n            break;\n        }\n      });\n      this.socket.on('testmode', value => {\n        this.testModeOn = value;\n      });\n      this.socket.on('tslclients_1secupdate', value => {\n        this.tslclients_1secupdate = value;\n      });\n      this.socket.on('PortsInUse', ports => {\n        this.portsInUse = ports;\n      });\n      this.socket.on('networkDiscovery', networkDiscovery => {\n        networkDiscovery.forEach(nd => {\n          if (!nd.ip) nd.ip = nd.addresses[0];\n        });\n        this.networkDiscovery = networkDiscovery;\n      });\n      this.socket.on('error_reports', errorReports => {\n        this.errorReports = errorReports;\n      });\n      this.socket.on('users', users => {\n        this.users = users;\n      });\n      this.socket.on('error', message => {\n        console.error(message);\n\n        if (message.includes(\"Access\") || message.includes(\"JWT\") || message.includes(\"jwt\")) {\n          console.error(\"JWT requested after server reconnection. This should not happen.\");\n          window.location.reload(); //tmp fix while we figure out how to handle server reconnection\n        }\n      });\n      this.socket.on('remote_error_opt', optStatus => {\n        this.remoteErrorOpt = optStatus;\n      });\n      this.socket.emit('get_error_reports');\n      this.socket.emit('version');\n      this.socket.emit('externalAddress');\n      this.socket.emit('interfaces');\n      this.socket.emit('get_error_reports');\n    }\n\n    prepareSources(sources) {\n      return sources.map(s => {\n        var _a;\n\n        s.sourceTypeName = (_a = this.getSourceTypeById(s.sourceTypeId)) === null || _a === void 0 ? void 0 : _a.label;\n        return s;\n      });\n    }\n\n    getSourceTypeById(sourceTypeId) {\n      return this.sourceTypes.find(({\n        id\n      }) => id === sourceTypeId);\n    }\n\n    getSourceById(sourceId) {\n      return this.sources.find(({\n        id\n      }) => id === sourceId);\n    }\n\n    joinProducers() {\n      this.socket.emit('producer');\n    }\n\n    joinAdmins() {\n      this.socket.emit('settings');\n    }\n\n    flashListener(listener) {\n      this.socket.emit('flash', listener.id);\n    }\n\n    getBusById(busId) {\n      //gets the bus type (preview/program) by the bus id\n      return this.busOptions.find(({\n        id\n      }) => id === busId);\n    }\n\n    getBusTypeById(busId) {\n      //gets the bus type (preview/program) by the bus id\n      let bus = this.busOptions.find(({\n        id\n      }) => id === busId);\n      return bus === null || bus === void 0 ? void 0 : bus.type;\n    }\n\n    getErrorReportById(id) {\n      return new Promise((resolve, reject) => {\n        this.socket.emit('get_error_report', id);\n        this.socket.once(\"error_report\", response => {\n          if (response !== false) {\n            resolve(response);\n          } else {\n            reject(response);\n          }\n        });\n      });\n    }\n\n    sendAccessToken(accessToken) {\n      this.accessToken = accessToken;\n      this.socket.emit('access_token', accessToken);\n    }\n\n  }\n\n  SocketService.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n\n  SocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac,\n    providedIn: 'root'\n  });\n  return SocketService;\n})();","map":null,"metadata":{},"sourceType":"module"}